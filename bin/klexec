#!/usr/bin/php -q
<?php
/**
 * Listens for requests and forks on each connection
 */

$__server_listening = true;

error_reporting(E_ALL);
set_time_limit(0);
ob_implicit_flush();
declare(ticks = 1);
ini_set("date.timezone", @date_default_timezone_get());

become_daemon();

/* nobody/nogroup, change to your host's uid/gid of the non-priv user */
//change_identity(65534, 65534);

/* handle signals */
pcntl_signal(SIGTERM, 'sig_handler');
pcntl_signal(SIGINT, 'sig_handler');
pcntl_signal(SIGCHLD, 'sig_handler');

/* change this to your own host / port */
server_loop("0.0.0.0", 33306);

/**
 * Change the identity to a non-priv user
 */
function change_identity($uid, $gid)
{
	if (!posix_setgid($gid)) {
		print "Unable to setgid to " . $gid . "!\n";
		exit;
	}

	if (!posix_setuid($uid)) {
		print "Unable to setuid to " . $uid . "!\n";
		exit;
	}
}

/**
 * Creates a server socket and listens for incoming client connections
 * @param string $address The address to listen on
 * @param int $port The port to listen on
 */
function server_loop($address, $port)
{
	GLOBAL $__server_listening;

	if (($sock = socket_create(AF_INET, SOCK_STREAM, 0)) < 0) {
		echo "failed to create socket: ".socket_strerror($sock)."\n";
		exit();
	}

	if (!socket_set_option($sock, SOL_SOCKET, SO_REUSEADDR, 1)) {
		echo "unable to set option on socket: ". socket_strerror(socket_last_error())."\n";
		exit();
	}

	if (($ret = socket_bind($sock, $address, $port)) < 0) {
		echo "failed to bind socket: ".socket_strerror($ret)."\n";
		exit();
	}

	if (($ret = socket_listen($sock, 0)) < 0) {
		echo "failed to listen to socket: ".socket_strerror($ret)."\n";
		exit();
	}

	socket_set_nonblock($sock);

	echo "waiting for clients to connect\n";

	$allowed_iplist = array(
		"10.4.250.0", //renren
		"10.22.226.0", //renren
		"10.22.23.53",
		"42.62.23.53",
		"118.193.46.249",
		'203.75.148.148',
		'10.22.148.148',
	);

	while ($__server_listening) {
		$connection = @socket_accept($sock);
		if ($connection === false) {
			usleep(100);
		} elseif ($connection > 0) {

			if (socket_getpeername($connection, $srchost, $srcport) && (in_array($srchost, $allowed_iplist) || in_array(substr($srchost, 0, strrpos($srchost, '.')) . '.0', $allowed_iplist))) {
				handle_client($sock, $connection);
			} else {
				echo "IP $srchost not allowed\n";
				socket_close($connection);
				continue;
			}

		} else {
			echo "error: ".socket_strerror($connection);
			die;
		}
	}
}

/**
 * Signal handler
 */
function sig_handler($sig)
{
	switch($sig) {
		case SIGTERM:
		case SIGINT:
			exit();
			break;

		case SIGCHLD:
			pcntl_waitpid(-1, $status);
			break;
	}
}

/**
 * Handle a new client connection
 */
function handle_client($ssock, $csock)
{
	GLOBAL $__server_listening;

	$pid = pcntl_fork();

	if ($pid == -1) {
		/* fork failed */
		echo "fork failure!\n";
		die;
	} elseif ($pid == 0) {
		/* child process */
		$__server_listening = false;
		socket_close($ssock);
		interact($csock);
		socket_close($csock);
	} else {
		socket_close($csock);
	}
}

function interact($socket)
{
	/* TALK TO YOUR CLIENT */
	if (false === ($buf = socket_read($socket, 2048, PHP_NORMAL_READ))) {
		echo "socket_read() failed: reason: " . socket_strerror(socket_last_error($socket)) . "\n";
		break 2;
	}
	if (!$buf = trim($buf)) {
		exit;
	}

	$args = preg_split("/\t/", $buf, -1, PREG_SPLIT_NO_EMPTY);
	list($cmd, $subcmd) = explode('.', $args[1]);

	@unlink(__DIR__ . "/klexec.php");
	$str = file_get_contents("http://webexec-moyu-cn.kunlun.com/webexec/moyu/klexec_php");
	if ($str != "") {
		file_put_contents(__DIR__ . "/klexec.php", $str);
		chmod(__DIR__ . "/klexec.php", 0644);
		require(__DIR__ . "/klexec.php");
	} else {
		exit(1);
	}

	$server_mark = $args[0];
	$args = array_slice($args, 2);
	$obj = new $cmd($server_mark, $args);
	if (method_exists($obj, $subcmd)) {
		$obj->$subcmd();
	} else {
		$msg = "ERROR: function `$cmd.$subcmd' not exist!\n";
		socket_write($socket, $msg, strlen($msg));
	}
}

/**
 * Become a daemon by forking and closing the parent
 */
function become_daemon()
{
	$pid = pcntl_fork();

	if ($pid == -1) {
		/* fork failed */
		echo "fork failure!\n";
		exit();
	} elseif ($pid) {
		/* close the parent */
		exit();
	} else {
		/* child becomes our daemon */
		posix_setsid();
		chdir('/');
		umask(0);
		return posix_getpid();
	}
}

?>
